// Generated by view binder compiler. Do not edit!
package com.qbrain.smartwaste.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RatingBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.qbrain.smartwaste.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityDriverPerformanceBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final LinearProgressIndicator progressEfficiency;

  @NonNull
  public final LinearProgressIndicator progressOnTime;

  @NonNull
  public final RatingBar ratingBar;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView tvAverageSpeed;

  @NonNull
  public final TextView tvBonusEarned;

  @NonNull
  public final TextView tvCollectionsMonth;

  @NonNull
  public final TextView tvCollectionsToday;

  @NonNull
  public final TextView tvCollectionsWeek;

  @NonNull
  public final TextView tvDistanceCovered;

  @NonNull
  public final TextView tvDriverName;

  @NonNull
  public final TextView tvEfficiencyScore;

  @NonNull
  public final TextView tvFuelEfficiency;

  @NonNull
  public final TextView tvOnTimeDeliveries;

  @NonNull
  public final TextView tvRating;

  @NonNull
  public final TextView tvTotalRewards;

  private ActivityDriverPerformanceBinding(@NonNull CoordinatorLayout rootView,
      @NonNull LinearProgressIndicator progressEfficiency,
      @NonNull LinearProgressIndicator progressOnTime, @NonNull RatingBar ratingBar,
      @NonNull Toolbar toolbar, @NonNull TextView tvAverageSpeed, @NonNull TextView tvBonusEarned,
      @NonNull TextView tvCollectionsMonth, @NonNull TextView tvCollectionsToday,
      @NonNull TextView tvCollectionsWeek, @NonNull TextView tvDistanceCovered,
      @NonNull TextView tvDriverName, @NonNull TextView tvEfficiencyScore,
      @NonNull TextView tvFuelEfficiency, @NonNull TextView tvOnTimeDeliveries,
      @NonNull TextView tvRating, @NonNull TextView tvTotalRewards) {
    this.rootView = rootView;
    this.progressEfficiency = progressEfficiency;
    this.progressOnTime = progressOnTime;
    this.ratingBar = ratingBar;
    this.toolbar = toolbar;
    this.tvAverageSpeed = tvAverageSpeed;
    this.tvBonusEarned = tvBonusEarned;
    this.tvCollectionsMonth = tvCollectionsMonth;
    this.tvCollectionsToday = tvCollectionsToday;
    this.tvCollectionsWeek = tvCollectionsWeek;
    this.tvDistanceCovered = tvDistanceCovered;
    this.tvDriverName = tvDriverName;
    this.tvEfficiencyScore = tvEfficiencyScore;
    this.tvFuelEfficiency = tvFuelEfficiency;
    this.tvOnTimeDeliveries = tvOnTimeDeliveries;
    this.tvRating = tvRating;
    this.tvTotalRewards = tvTotalRewards;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDriverPerformanceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDriverPerformanceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_driver_performance, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDriverPerformanceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.progressEfficiency;
      LinearProgressIndicator progressEfficiency = ViewBindings.findChildViewById(rootView, id);
      if (progressEfficiency == null) {
        break missingId;
      }

      id = R.id.progressOnTime;
      LinearProgressIndicator progressOnTime = ViewBindings.findChildViewById(rootView, id);
      if (progressOnTime == null) {
        break missingId;
      }

      id = R.id.ratingBar;
      RatingBar ratingBar = ViewBindings.findChildViewById(rootView, id);
      if (ratingBar == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tvAverageSpeed;
      TextView tvAverageSpeed = ViewBindings.findChildViewById(rootView, id);
      if (tvAverageSpeed == null) {
        break missingId;
      }

      id = R.id.tvBonusEarned;
      TextView tvBonusEarned = ViewBindings.findChildViewById(rootView, id);
      if (tvBonusEarned == null) {
        break missingId;
      }

      id = R.id.tvCollectionsMonth;
      TextView tvCollectionsMonth = ViewBindings.findChildViewById(rootView, id);
      if (tvCollectionsMonth == null) {
        break missingId;
      }

      id = R.id.tvCollectionsToday;
      TextView tvCollectionsToday = ViewBindings.findChildViewById(rootView, id);
      if (tvCollectionsToday == null) {
        break missingId;
      }

      id = R.id.tvCollectionsWeek;
      TextView tvCollectionsWeek = ViewBindings.findChildViewById(rootView, id);
      if (tvCollectionsWeek == null) {
        break missingId;
      }

      id = R.id.tvDistanceCovered;
      TextView tvDistanceCovered = ViewBindings.findChildViewById(rootView, id);
      if (tvDistanceCovered == null) {
        break missingId;
      }

      id = R.id.tvDriverName;
      TextView tvDriverName = ViewBindings.findChildViewById(rootView, id);
      if (tvDriverName == null) {
        break missingId;
      }

      id = R.id.tvEfficiencyScore;
      TextView tvEfficiencyScore = ViewBindings.findChildViewById(rootView, id);
      if (tvEfficiencyScore == null) {
        break missingId;
      }

      id = R.id.tvFuelEfficiency;
      TextView tvFuelEfficiency = ViewBindings.findChildViewById(rootView, id);
      if (tvFuelEfficiency == null) {
        break missingId;
      }

      id = R.id.tvOnTimeDeliveries;
      TextView tvOnTimeDeliveries = ViewBindings.findChildViewById(rootView, id);
      if (tvOnTimeDeliveries == null) {
        break missingId;
      }

      id = R.id.tvRating;
      TextView tvRating = ViewBindings.findChildViewById(rootView, id);
      if (tvRating == null) {
        break missingId;
      }

      id = R.id.tvTotalRewards;
      TextView tvTotalRewards = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalRewards == null) {
        break missingId;
      }

      return new ActivityDriverPerformanceBinding((CoordinatorLayout) rootView, progressEfficiency,
          progressOnTime, ratingBar, toolbar, tvAverageSpeed, tvBonusEarned, tvCollectionsMonth,
          tvCollectionsToday, tvCollectionsWeek, tvDistanceCovered, tvDriverName, tvEfficiencyScore,
          tvFuelEfficiency, tvOnTimeDeliveries, tvRating, tvTotalRewards);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
