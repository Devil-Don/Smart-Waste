// Generated by view binder compiler. Do not edit!
package com.qbrain.smartwaste.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.qbrain.smartwaste.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBinDetailsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnRefresh;

  @NonNull
  public final MaterialButton btnReportIssue;

  @NonNull
  public final Chip chipStatus;

  @NonNull
  public final LinearProgressIndicator progressBattery;

  @NonNull
  public final LinearProgressIndicator progressFill;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView tvBatteryLevel;

  @NonNull
  public final TextView tvBinId;

  @NonNull
  public final TextView tvFillPercentage;

  @NonNull
  public final TextView tvLastCollection;

  @NonNull
  public final TextView tvTemperature;

  @NonNull
  public final TextView tvWeight;

  private ActivityBinDetailsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnRefresh, @NonNull MaterialButton btnReportIssue,
      @NonNull Chip chipStatus, @NonNull LinearProgressIndicator progressBattery,
      @NonNull LinearProgressIndicator progressFill, @NonNull Toolbar toolbar,
      @NonNull TextView tvBatteryLevel, @NonNull TextView tvBinId,
      @NonNull TextView tvFillPercentage, @NonNull TextView tvLastCollection,
      @NonNull TextView tvTemperature, @NonNull TextView tvWeight) {
    this.rootView = rootView;
    this.btnRefresh = btnRefresh;
    this.btnReportIssue = btnReportIssue;
    this.chipStatus = chipStatus;
    this.progressBattery = progressBattery;
    this.progressFill = progressFill;
    this.toolbar = toolbar;
    this.tvBatteryLevel = tvBatteryLevel;
    this.tvBinId = tvBinId;
    this.tvFillPercentage = tvFillPercentage;
    this.tvLastCollection = tvLastCollection;
    this.tvTemperature = tvTemperature;
    this.tvWeight = tvWeight;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBinDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBinDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_bin_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBinDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnRefresh;
      MaterialButton btnRefresh = ViewBindings.findChildViewById(rootView, id);
      if (btnRefresh == null) {
        break missingId;
      }

      id = R.id.btnReportIssue;
      MaterialButton btnReportIssue = ViewBindings.findChildViewById(rootView, id);
      if (btnReportIssue == null) {
        break missingId;
      }

      id = R.id.chipStatus;
      Chip chipStatus = ViewBindings.findChildViewById(rootView, id);
      if (chipStatus == null) {
        break missingId;
      }

      id = R.id.progressBattery;
      LinearProgressIndicator progressBattery = ViewBindings.findChildViewById(rootView, id);
      if (progressBattery == null) {
        break missingId;
      }

      id = R.id.progressFill;
      LinearProgressIndicator progressFill = ViewBindings.findChildViewById(rootView, id);
      if (progressFill == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tvBatteryLevel;
      TextView tvBatteryLevel = ViewBindings.findChildViewById(rootView, id);
      if (tvBatteryLevel == null) {
        break missingId;
      }

      id = R.id.tvBinId;
      TextView tvBinId = ViewBindings.findChildViewById(rootView, id);
      if (tvBinId == null) {
        break missingId;
      }

      id = R.id.tvFillPercentage;
      TextView tvFillPercentage = ViewBindings.findChildViewById(rootView, id);
      if (tvFillPercentage == null) {
        break missingId;
      }

      id = R.id.tvLastCollection;
      TextView tvLastCollection = ViewBindings.findChildViewById(rootView, id);
      if (tvLastCollection == null) {
        break missingId;
      }

      id = R.id.tvTemperature;
      TextView tvTemperature = ViewBindings.findChildViewById(rootView, id);
      if (tvTemperature == null) {
        break missingId;
      }

      id = R.id.tvWeight;
      TextView tvWeight = ViewBindings.findChildViewById(rootView, id);
      if (tvWeight == null) {
        break missingId;
      }

      return new ActivityBinDetailsBinding((CoordinatorLayout) rootView, btnRefresh, btnReportIssue,
          chipStatus, progressBattery, progressFill, toolbar, tvBatteryLevel, tvBinId,
          tvFillPercentage, tvLastCollection, tvTemperature, tvWeight);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
